{
  "name": "Doc_Automation",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours"
            }
          ]
        }
      },
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1,
      "position": [
        -220,
        40
      ],
      "id": "63201168-5e21-4687-b40b-38d4c6cd83d6"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "=/tmp/reports/{{ $json.filename }}",
        "options": {
          "append": false
        }
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        640,
        -20
      ],
      "id": "c2d8789b-a9f8-46ca-b74c-f64ef6a70e53",
      "name": "Read/Write Files from Disk",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsCode": "// --------------------------------------------------\n// 1. GROUP LOGS\n// --------------------------------------------------\nconst grouped = {};\nfor (const item of $input.all()) {\n\tconst log = item.json;\n\tconst key = `${log.agent_name}_${log.event_type}`;\n\tif (!grouped[key]) grouped[key] = [];\n\tgrouped[key].push(log);\n}\n\n// --------------------------------------------------\n// 2. BUILD MARKDOWN\n// --------------------------------------------------\nlet md = '# Auto-Stack Activity Report\\n\\n';\nmd += `Generated: ${new Date().toISOString()}\\n\\n`;\n\nfor (const [key, logs] of Object.entries(grouped)) {\n\tconst [agent, event] = key.split('_');\n\tmd += `## ${agent} â€“ ${event}\\n\\n`;\n\tfor (const l of logs) {\n\t\tmd += `- ${l.timestamp}: ${l.message}\\n`;\n\t\tif (l.metadata) md += `  - Metadata: ${JSON.stringify(l.metadata)}\\n`;\n\t\tif (l.status !== 'success') {\n\t\t\tmd += `  - Status: ${l.status}\\n`;\n\t\t\tif (l.error) md += `  - Error: ${l.error}\\n`;\n\t\t}\n\t}\n\tmd += '\\n';\n}\n\n// --------------------------------------------------\n// 3. PREPARE BINARY PAYLOAD\n// --------------------------------------------------\nconst iso  = new Date().toISOString().replace(/[:.]/g, '-');\nconst filename  = `activity_report_${iso}.md`;\nconst mimeType  = 'text/markdown';\n\nconst data = await this.helpers.prepareBinaryData(\n\tBuffer.from(md, 'utf8'),\n\tfilename,\n\tmimeType,\n);\n\n// --------------------------------------------------\n// 4. RETURN ONE ITEM WITH json + binary\n// --------------------------------------------------\nreturn [\n\t{\n\t\tjson:   { filename },\n\t\tbinary: { data },\n\t},\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        460,
        -20
      ],
      "id": "c53a760d-30c6-4055-8995-27c8e2da8be1",
      "name": "Generate Markdown",
      "alwaysOutputData": true,
      "executeOnce": true
    },
    {
      "parameters": {
        "command": "=mkdir -p /tmp/reports"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        200,
        40
      ],
      "id": "1d10667f-e83c-4f8f-8e2a-35155a911651",
      "name": "Execute Command",
      "alwaysOutputData": true,
      "executeOnce": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "value": "=public",
          "mode": "name"
        },
        "table": {
          "__rl": true,
          "value": "agent_logs",
          "mode": "list",
          "cachedResultName": "agent_logs"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "agent_name": "n8n",
            "workflow": "={{ $workflow.name }}",
            "action": "documentation_update",
            "event_type": "report_generation",
            "message": "={{ 'Wrote report ' + $json.filename }}",
            "run_id": "={{ $execution.id }}",
            "status": "success",
            "metadata": "={{ { path: '/tmp/reports/' + $json.filename } }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "timestamp",
              "displayName": "timestamp",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            },
            {
              "id": "agent_name",
              "displayName": "agent_name",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "workflow",
              "displayName": "workflow",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "action",
              "displayName": "action",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "event_type",
              "displayName": "event_type",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "message",
              "displayName": "message",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "run_id",
              "displayName": "run_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "error",
              "displayName": "error",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "metadata",
              "displayName": "metadata",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        820,
        -20
      ],
      "id": "165e8c4b-b0dd-4767-b5dd-e93494ab878c",
      "name": "Postgres",
      "credentials": {
        "postgres": {
          "id": "Jwo9TQK2K1qAxlr8",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT *\nFROM agent_logs\nWHERE timestamp > NOW() - INTERVAL '1 hour';",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        0,
        40
      ],
      "id": "a8d327fe-0b01-46ba-b6f0-53140774cfe7",
      "name": "Postgres1",
      "credentials": {
        "postgres": {
          "id": "Jwo9TQK2K1qAxlr8",
          "name": "Postgres account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Postgres1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Markdown": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk": {
      "main": [
        [
          {
            "node": "Postgres",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Command": {
      "main": [
        [
          {
            "node": "Generate Markdown",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Postgres1": {
      "main": [
        [
          {
            "node": "Execute Command",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "ba1fbce2-beef-4dfd-8256-f57543fa9f53",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "86a72cb17b8cb1b6e2035080a3f955af7f7378ac6544fba404e6df979973b7cc"
  },
  "id": "HFH9CSDxPFTmUH1L",
  "tags": [],
  "version": 2
}